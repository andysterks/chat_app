[{"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js":"1","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js":"2","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js":"3","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js":"4","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js":"5"},{"size":251,"mtime":1647495590168,"results":"6","hashOfConfig":"7"},{"size":710,"mtime":1648289970021,"results":"8","hashOfConfig":"7"},{"size":2916,"mtime":1648290609883,"results":"9","hashOfConfig":"7"},{"size":5254,"mtime":1648200240547,"results":"10","hashOfConfig":"7"},{"size":538,"mtime":1648287315468,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vy6rpv",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js",[],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js",["29"],[],"import \"./App.css\";\nimport ChatInterface from \"./Components/ChatInterface\";\nimport SignInForm from \"./Components/SignInForm\";\nimport useToken from \"./Components/useToken\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n// import { useState } from \"react\";\n\nfunction App() {\n  const { token, removeToken, setToken } = useToken();\n  return (\n    <div>\n      <Router>\n        {!token ? \n          <SignInForm setToken={setToken}/> \n         : (\n          <>\n            <Routes>\n              <Route exact path=\"/chat\" element={<ChatInterface token={token} setToken={setToken}/>} />\n            </Routes>\n          </>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js",["30","31"],[],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js",["32"],[],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./ChatInterface.css\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst ChatInterface = () => {\n  window.setTimeout(function () {\n    let element = document.getElementById(\"chatBox\");\n    element.scrollTop = element.scrollHeight;\n  });\n\n  // const setTopic = (id) => {\n  //   let topicBox = document.getElementById(id);\n  //   setTopic(topicBox.id);\n  // };\n\n  const [topic, setTopic] = useState(\"General\");\n\n  const [messages, setMessages] = useState([]);\n\n  const [users, setUsers] = useState([]);\n\n  const getUserInfo = (user_id) => {\n    return users.find((user) => user.id === user_id )\n  };\n\n  async function getMessages() {\n    await axios.get(`api/messages/${topic}`).then((res) => {\n      setMessages(res.data);\n      // console.log(res.data);\n     \n    });\n  }\n  async function getUsers() {\n    await axios.get(\"api/users\").then((res) => {\n      setUsers(res.data);\n      // console.log(res.data);\n    });\n  }\n\n\n  const data = messages.map((message) => {\n    return {\n      ...message,\n      user: getUserInfo(message.userid),\n    };\n  });\n\n \n\n  const send = () => {\n    let message = document.getElementById(\"messageBox\");\n    const newMessage = { text: message.value, user: { id: \"1\", name: \"CrystalW\" } };\n    setMessages([...data, newMessage]);\n    message.value = \"\";\n  };\n\n  \n\n  useEffect(() => {\n    getMessages();\n    getUsers();\n  },[topic]);\n\n  const theMessages =\n    data &&\n    data.map((message, index) => {\n      return (\n        <div\n          className=\"chat-container\"\n          style={\n            message.user?.username === \"CrystalW\"\n              ? { background: \"#e45437\" }\n              : { background: \"\" }\n          }\n          key={index}\n        >\n          <div\n            className=\"card-header d-flex justify-content-between p-3\"\n            style={{ borderBottom: \"1px solid rgba(255, 255, 255, 0.3\" }}\n          >\n            <p className=\"fw-bold mb-0\">{message?.user?.username}</p>\n            <p className=\" small mb-0\">\n              <i>{message?.to_char}</i>\n            </p>\n          </div>\n          <div className=\"card-body\">\n            <p className=\"mb-0 mx-auto p-2\">{message.text}</p>\n          </div>\n        </div>\n      );\n    });\n\n  return (\n    <>\n      <div id=\"container\">\n        <div className=\"text-center mx-auto\" id=\"navbar\">\n          {topic}\n        </div>\n\n        <div className=\"userBox col-3 userText\">\n          <h6 className=\"text-center p-3 mt-2 pb-1\">Active Users</h6>\n          <p className=\"text-center\">User</p>\n          <h6 className=\"text-center p-3\">Topics</h6>\n          <Button\n            className=\"p-2 d-flex justify-content-center align-items-center mx-auto mb-4\"\n            autoFocus=\"True\"\n            id=\"General\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              // getMessages();\n             \n            }}\n          >\n            General\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Art\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              // getMessages();\n            }}\n          >\n            Art\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Film & TV\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              // getMessages();\n              \n            }}\n          >\n            Film & TV\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Music\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              // getMessages();\n              \n            }}\n          >\n            Music\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-5\"\n            id=\"Sports\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              // getMessages();\n            }}\n          >\n            Sports\n          </Button>\n\n          <Button\n            className=\"p-3 d-flex text-center mx-auto logoutBtn\"\n            as={Link}\n            to=\"/\"\n          >\n            Logout\n          </Button>\n        </div>\n\n        <div className=\"parent\">\n          <div className=\"discussionBox\" id=\"chatBox\">\n            <p className=\"pt-5\">The Date</p>\n            {theMessages}\n          </div>\n\n          <div className=\"flex child\">\n            <div>\n              <div className=\"input-group\">\n                <textarea\n                  id=\"messageBox\"\n                  type=\"text\"\n                  className=\"form-control messageBox\"\n                  rows=\"2\"\n                  cols=\"500\"\n                  placeholder=\"Type Your Message\"\n                  onKeyUp={(e) => {\n                    if (e.key === \"Enter\") {\n                      send();\n                    }\n                  }}\n                />\n              </div>\n            </div>\n            <Button type=\"submit\" className=\"btn sendBtn\" onClick={send}>\n              SEND\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatInterface;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":9,"column":18,"nodeType":"35","messageId":"36","endLine":9,"endColumn":29},{"ruleId":"33","severity":1,"message":"37","line":9,"column":10,"nodeType":"35","messageId":"36","endLine":9,"endColumn":14},{"ruleId":"38","severity":1,"message":"39","line":89,"column":23,"nodeType":"40","endLine":89,"endColumn":35},{"ruleId":"41","severity":1,"message":"42","line":64,"column":5,"nodeType":"43","endLine":64,"endColumn":12,"suggestions":"44"},"no-unused-vars","'removeToken' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["45"],{"desc":"46","fix":"47"},"Update the dependencies array to be: [getMessages, topic]",{"range":"48","text":"49"},[1479,1486],"[getMessages, topic]"]