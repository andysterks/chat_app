[{"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js":"1","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js":"2","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js":"3","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js":"4","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js":"5"},{"size":251,"mtime":1647495590168,"results":"6","hashOfConfig":"7"},{"size":783,"mtime":1648529590087,"results":"8","hashOfConfig":"7"},{"size":3377,"mtime":1648541231003,"results":"9","hashOfConfig":"7"},{"size":5512,"mtime":1648538961440,"results":"10","hashOfConfig":"7"},{"size":523,"mtime":1648453452025,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"vy6rpv",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/index.js",[],[],["31","32"],"/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/App.js",["33"],[],"import \"./App.css\";\nimport ChatInterface from \"./Components/ChatInterface\";\nimport SignInForm from \"./Components/SignInForm\";\nimport useToken from \"./Components/useToken\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const { token, setToken } = useToken();\n  \n  return (\n    <div>\n      <Router>\n        {!token && token !== \"\" && token !== undefined ? (\n          <SignInForm />\n        ) : (\n          <>\n            <Routes>\n              <Route\n                exact\n                path=\"/chat\"\n                setToken={setToken}\n                element={<ChatInterface />}\n              />\n            </Routes>\n          </>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/SignInForm.js",["34","35","36","37"],[],"import React from \"react\";\nimport \"./SignInForm.css\";\nimport { Button } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport chatIcon from \"../img/chat-app-icon.png\";\nimport userIcon from \"../img/userIcon.png\";\nimport pwdIcon from \"../img/passwordIcon.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\n\n\n//Look into UseNaviate hook\n\nconst SignInForm = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  let isPasswordShown = useState(false)\n  let wrongDetails = useState(false)\n\n  let navigate = useNavigate();\n\n  const handleClick = () => {\n    const data = {\n      username: username,\n      password: password,\n    };\n\n    axios\n      .post(\"/api/token\", data, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((res) => {\n        return res;\n      })\n      .then((res) => {\n        localStorage.setItem(\"token\", res.data.access_token);\n        navigate(\"/chat\");\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.log(\"There was an error!\", error);\n      });\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"text-center pa-3\">\n        <img src={chatIcon} className=\"chatIcon\" alt=\"chat-icon\"></img>\n      </div>\n      <div className=\"text-center mt4 name\">Sign in to ChatSpace</div>\n      <form className=\"p-3 mt-3 text-center\">\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            {\" \"}\n            <img className=\"userIcon\" alt=\"userIcon\" src={userIcon} />{\" \"}\n          </span>{\" \"}\n          <input\n            type=\"text\"\n            name=\"userName\"\n            id=\"userName\"\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            value={username}\n          ></input>\n        </div>\n        <div className=\"form-field d-flex align-items-center\">\n          {\" \"}\n          <span>\n            <img className=\"pwdIcon\" alt=\"pwdIcon\" src={pwdIcon} />\n          </span>{\" \"}\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"fa-eye icon\"\n            id=\"password\"\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            onKeyUp={(e) => {\n            if (e.key == \"Enter\") {\n              handleClick();\n            }\n          }}\n            value={password}\n          >\n\n            \n         \n          </input>\n          <span className=\"passwordIcon\"> \n          <FontAwesomeIcon icon={faEye} />  \n          </span>\n        </div>\n        <Button\n          className=\"btn mt-3 p-2 loginBtn\"\n          onClick={handleClick}\n        >\n          Login\n        </Button>\n      </form>\n\n      <div className=\"text-center fs-6 p-3\">\n        {\" \"}\n        Not a member? <a href=\"#\">Sign Up</a>\n        <FontAwesomeIcon icon=\"fa-regular fa-eye\" />  \n      </div>\n      {/* <div className=\"text-center p-2\" style={{fontSize: \"13px\"}}> <a href=\"#\">Forgot Password</a></div> */}\n      {/* <div className=\"text-center fs-6\"> Or <a href=\"#\">Continue as Guest</a></div> */}\n    </div>\n  );\n};\n\nexport default SignInForm;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/ChatInterface.js",["38","39"],[],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./ChatInterface.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport useToken from \"./useToken\";\n\nconst ChatInterface = () => {\n  window.setTimeout(function () {\n    let element = document.getElementById(\"chatBox\");\n    element.scrollTop = element.scrollHeight;\n  });\n\n  const [topic, setTopic] = useState(\"General\");\n\n  const [messages, setMessages] = useState([]);\n\n  const [users, setUsers] = useState([]);\n\n  const {removeToken} = useToken();\n\n  let navigate = useNavigate()\n  \n\n  const getUserInfo = (user_id) => {\n    return users.find((user) => user.id === user_id )\n  };\n\n  async function getMessages() {\n    await axios.get(`api/messages/${topic}`).then((res) => {\n      setMessages(res.data);\n      // console.log(res.data);\n     \n    });\n  }\n  // async function getUsers() {\n  //   await axios.get(\"api/users\").then((res) => {\n  //     setUsers(res.data);\n  //     // console.log(res.data);\n  //   });\n  // }\n\n\nconst logOut = () => {\n\n  axios\n  .post(\"/api/logout\", data, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  })\n  .then(( res ) => {\n    removeToken()\n    navigate(\"/\")\n    window.location.reload()\n    \n  })\n  .catch((error) => {\n    console.log(\"An error was caught!\", error);\n  });\n}\n\n  \n\n\n  const data = messages.map((message) => {\n    return {\n      ...message,\n      user: getUserInfo(message.userid),\n    };\n  });\n\n \n\n  const send = () => {\n    let message = document.getElementById(\"messageBox\");\n    const newMessage = { text: message.value, user: { id: \"1\", name: \"CrystalW\" } };\n    setMessages([...data, newMessage]);\n    message.value = \"\";\n  };\n\n  \n\n  useEffect(() => {\n    getMessages();\n    // getUsers();\n  },[topic]);\n\n  const theMessages =\n    data &&\n    data.map((message, index) => {\n      return (\n        <div\n          className=\"chat-container\"\n          style={\n            message.user?.username === \"CrystalW\"\n              ? { background: \"#e45437\" }\n              : { background: \"\" }\n          }\n          key={index}\n        >\n          <div\n            className=\"card-header d-flex justify-content-between p-3\"\n            style={{ borderBottom: \"1px solid rgba(255, 255, 255, 0.3\" }}\n          >\n            <p className=\"fw-bold mb-0\">{message?.user?.username}</p>\n            <p className=\" small mb-0\">\n              <i>{message?.to_char}</i>\n            </p>\n          </div>\n          <div className=\"card-body\">\n            <p className=\"mb-0 mx-auto p-2\">{message.text}</p>\n          </div>\n        </div>\n      );\n    });\n\n  return (\n    <>\n      <div id=\"container\">\n        <div className=\"text-center mx-auto\" id=\"navbar\">\n          {topic}\n        </div>\n\n        <div className=\"userBox col-3 userText\">\n          <h6 className=\"text-center p-3 mt-2 pb-1\">Active Users</h6>\n          <p className=\"text-center\">User</p>\n          <h6 className=\"text-center p-3\">Topics</h6>\n          <Button\n            className=\"p-2 d-flex justify-content-center align-items-center mx-auto mb-4\"\n            autoFocus=\"True\"\n            id=\"General\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              \n             \n            }}\n          >\n            General\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Art\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n             \n            }}\n          >\n            Art\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Film & TV\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              \n              \n            }}\n          >\n            Film & TV\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-4\"\n            id=\"Music\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n           \n              \n            }}\n          >\n            Music\n          </Button>\n          <Button\n            className=\"p-2 d-flex text-center mx-auto mb-5\"\n            id=\"Sports\"\n            onClick={(e) => {\n              setTopic(e.target.id);\n              \n            }}\n          >\n            Sports\n          </Button>\n\n          <Button\n            className=\"p-3 d-flex text-center mx-auto logoutBtn\"\n            onClick={logOut}\n          >\n            Logout\n          </Button>\n        </div>\n\n        <div className=\"parent\">\n          <div className=\"discussionBox\" id=\"chatBox\">\n            <p className=\"pt-5\">The Date</p>\n            {theMessages}\n          </div>\n\n          <div className=\"flex child\">\n            <div>\n              <div className=\"input-group\">\n                <textarea\n                  id=\"messageBox\"\n                  type=\"text\"\n                  className=\"form-control messageBox\"\n                  rows=\"2\"\n                  cols=\"500\"\n                  placeholder=\"Type Your Message\"\n                  onKeyUp={(e) => {\n                    if (e.key === \"Enter\") {\n                      send();\n                    }\n                  }}\n                />\n              </div>\n            </div>\n            <Button type=\"submit\" className=\"btn sendBtn\" onClick={send}>\n              SEND\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatInterface;\n","/Users/crystalword/Documents/Coding/Portfolio Projects/chat_app/frontend/src/Components/useToken.js",[],[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":6,"column":10,"nodeType":"46","messageId":"47","endLine":6,"endColumn":18},{"ruleId":"44","severity":1,"message":"48","line":19,"column":7,"nodeType":"46","messageId":"47","endLine":19,"endColumn":22},{"ruleId":"44","severity":1,"message":"49","line":20,"column":7,"nodeType":"46","messageId":"47","endLine":20,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":85,"column":23,"nodeType":"52","messageId":"53","endLine":85,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":109,"column":23,"nodeType":"56","endLine":109,"endColumn":35},{"ruleId":"44","severity":1,"message":"57","line":18,"column":17,"nodeType":"46","messageId":"47","endLine":18,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":88,"column":5,"nodeType":"60","endLine":88,"endColumn":12,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'isPasswordShown' is assigned a value but never used.","'wrongDetails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setUsers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [getMessages, topic]",{"range":"67","text":"68"},[1838,1845],"[getMessages, topic]"]